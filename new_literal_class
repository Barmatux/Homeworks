import re
from operator import add, sub, mul, truediv, mod

def expression(rbp=0):
    global token
    t = token
    token = next(gen)
    left = t.nud()
    while rbp < token.lbp:
        t = token
        token = next(gen)
        left = t.led(left)
    return left


class symbol_base:
    id=None
    value=None

    def nud(self):
        raise SyntaxError("Syntax error (%r)." % self.id)

    def led(self):
        raise SyntaxError("Syntax error (%r)." % self.id)

    def __repr__(self):
        if self.id == "(name)" or self.id == "(literal)":
            return "(%s %s)" % (self.id[1:-1], self.value)
        out = [self.id]
        out = map(str, filter(None, out))
        return "(" + " ".join(out) + ")"



symbol_table={}

operator_table ={'+': add, '-': sub, '*': mul, '/': truediv, '%': mod}


def symbol(id, bp=0):
    try:
        s = symbol_table[id]
    except KeyError:
        class s(symbol_base):
            pass
        s.id = id
        s.lbp = bp
        symbol_table[id] = s
    else:
        s.lbp = max(bp, s.lbp)
    return s


def infix(id, bp):
    def led(self, left):
        return operator_table[id](float(left.value), float(expression(bp).value))
    symbol(id, bp).led = led


def prefix(id, bp):
    def nud(self):
        return self
    symbol(id).nud = nud


infix("+", 10)
infix("-", 10)
infix("*", 20)
infix("/", 20)
infix("^", 30)
prefix("+", 100)
prefix("-", 100)
symbol("(literal)").nud = lambda self: self
symbol("(end)")

token_pat = re.compile("\s*(?:(\d+)|(.))")

def tokenize(program):
    for number, operator in token_pat.findall(program):
        if number:
            symbol = symbol_table['(literal)']
            s = symbol()
            s.value = number
            yield s
        else:
            symbol = symbol_table.get(operator)
            if not symbol:
                raise SyntaxError('Unknown operator')
            yield symbol()
    symbol = symbol_table["(end)"]
    yield symbol()


def parse(program):
    global token, gen
    gen = tokenize(program)
    token = next(gen)
    return expression()


if __name__=='__main__':
    print(parse('4-6+1'))
