import re


def expression(rbp=0):
    global token
    t = token
    token = next(gen)
    left = t.nud()
    while rbp < token.lbp:
        t = token
        token = next(gen)
        left = t.led(left)
    return left


class literal_token:
    def __init__(self, value):
        self.value = int(value)
    def nud(self):
        return self.value


class operator_add_token:
    lbp = 20
    def nud(self):
        return expression(100)
    def led(self, left):
        return left + expression(20)

class operator_brack_token:
    lbp = 150
    def nud(self):
        return expression()


class operator_sub_token:
    lbp = 20
    def nud(self):
        return -expression(100)
    def led(self, left):
        return left - expression(20)

class operator_mul_token:
    lbp = 30
    def led(self, left):
        return left * expression(30)

class operator_div_token:
    lbp = 30
    def led(self, left):
        return left / expression(30)

class operator_pow_token:
    lbp = 40
    def led(self, left):
        return left ** expression(40)

class operator_coml_token:
    lbp = 10
    def led(self,left):
        return left > expression(10)


class end_token:
    lbp = 0


token_pat = re.compile("\s*(?:(\d+)|(.))")

def tokenize(program):
    for number, operator in token_pat.findall(program):
        if number:
            yield literal_token(number)
        elif operator == "+":
            yield operator_add_token()
        elif operator == "-":
            yield operator_sub_token()
        elif operator == "*":
            yield operator_mul_token()
        elif operator == "/":
            yield operator_div_token()
        elif operator == "^":
            yield operator_pow_token()
        elif operator == ">":
            yield operator_coml_token()
        else:
            raise SyntaxError("unknown operator")
    yield end_token()


def parse(program):
    global token, gen
    gen = tokenize(program)
    token = next(gen)
    return expression()



if __name__=='__main__':
    print(parse('4-6+1'))
